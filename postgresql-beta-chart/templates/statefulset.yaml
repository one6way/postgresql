apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgresql.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgresql.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ if eq 0 0 }}primary{{ else }}replica{{ end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      initContainers:
        - name: init-permissions
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
              mkdir -p /var/lib/postgresql/data
              chmod 700 /var/lib/postgresql/data
              chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }} /var/lib/postgresql/data
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgresql
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}
          ports:
            - name: postgresql
              containerPort: {{ .Values.postgresql.port }}
              protocol: TCP
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.username | quote }}
            {{- if not .Values.postgresql.existingSecret }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.fullname" . }}-credentials
                  key: postgresql-password
            {{- else }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.existingSecret }}
                  key: postgresql-password
            {{- end }}
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.database | quote }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_ORDINAL
              value: {{ "$(echo $(POD_NAME) | rev | cut -d'-' -f1 | rev)" }}
            {{- if .Values.postgresql.replication.enabled }}
            - name: POSTGRES_REPLICATION_MODE
              value: {{ "$(if [ \"$(POD_ORDINAL)\" = \"0\" ]; then echo \"master\"; else echo \"slave\"; fi)" }}
            - name: POSTGRES_REPLICATION_USER
              value: {{ .Values.postgresql.replication.user | quote }}
            - name: POSTGRES_REPLICATION_PASSWORD
              {{- if .Values.postgresql.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.existingSecret }}
                  key: postgresql-replication-password
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.fullname" . }}-credentials
                  key: postgresql-replication-password
              {{- end }}
            - name: POSTGRES_MASTER_HOST
              value: {{ include "postgresql.fullname" . }}-0.{{ include "postgresql.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local
            - name: POSTGRES_MASTER_PORT_NUMBER
              value: "{{ .Values.postgresql.port }}"
            {{- if gt (.Values.postgresql.replication.numSynchronousReplicas | int) 0 }}
            - name: POSTGRES_SYNCHRONOUS_REPLICAS
              value: {{ .Values.postgresql.replication.numSynchronousReplicas | quote }}
            - name: POSTGRES_SYNCHRONOUS_COMMIT_MODE
              value: {{ .Values.postgresql.replication.synchronousCommit | quote }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgresql-config
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }} -h 127.0.0.1 -p {{ .Values.postgresql.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.postgresql.username }} -d {{ .Values.postgresql.database }} -h 127.0.0.1 -p {{ .Values.postgresql.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # Корректное завершение работы PostgreSQL
                    pg_ctl -D ${PGDATA} -m fast -w stop
      volumes:
        - name: postgresql-config
          configMap:
            name: {{ include "postgresql.fullname" . }}-config
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }} 