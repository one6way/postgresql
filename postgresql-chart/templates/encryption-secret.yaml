{{- if .Values.encryption.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgresql.fullname" . }}-encryption
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
    app.kubernetes.io/component: encryption
data:
  {{- if .Values.encryption.existingKey }}
  # Используем существующий ключ шифрования
  encryption.key: {{ .Values.encryption.existingKey | b64enc | quote }}
  {{- else }}
  # Генерируем новый ключ шифрования
  encryption.key: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  {{- if .Values.encryption.ssl.enabled }}
  # Если SSL включен, добавляем сертификаты
  {{- if and .Values.encryption.ssl.cert .Values.encryption.ssl.key }}
  # Используем предоставленные сертификаты
  server.crt: {{ .Values.encryption.ssl.cert | b64enc | quote }}
  server.key: {{ .Values.encryption.ssl.key | b64enc | quote }}
  {{- else }}
  # Генерируем самоподписанные сертификаты
  # Примечание: в production рекомендуется использовать сертификаты, подписанные доверенным CA
  server.crt: {{ include "postgresql.generateCert" . | b64enc | quote }}
  server.key: {{ include "postgresql.generateKey" . | b64enc | quote }}
  {{- end }}
  {{- if .Values.encryption.ssl.ca }}
  # Если предоставлен CA сертификат
  ca.crt: {{ .Values.encryption.ssl.ca | b64enc | quote }}
  {{- end }}
  {{- end }}
{{- end }}

{{- define "postgresql.generateKey" -}}
{{- $key := genPrivateKey "rsa" -}}
{{ $key }}
{{- end -}}

{{- define "postgresql.generateCert" -}}
{{- $cn := include "postgresql.fullname" . -}}
{{- $altNames := list (printf "%s.%s" (include "postgresql.fullname" .) .Release.Namespace) (printf "%s.%s.svc" (include "postgresql.fullname" .) .Release.Namespace) -}}
{{- $ca := genCA (printf "%s-ca" $cn) 365 -}}
{{- $cert := genSignedCert $cn nil $altNames 365 $ca -}}
{{ $cert.Cert }}
{{- end -}} 